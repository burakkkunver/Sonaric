namespace: ethereum

base:
  metadata:
    tags: blockchain, evm
    icon: https://avatars.githubusercontent.com/u/6250754?s=200&v=4
    version: 1.0.0
    currency: ETH
    wallet-support: import-key, export-key, list-keys
  requirements:
    defines: requirements
    CPU: 4
    RAM: 32768
    GPU: false
    disk: 3500
  containers:
    erigon:
      image: "thorax/erigon"
      image-tag: v2.60.0
      paths:
        - <- `${monk-volume-path}/ethereum:${data-dir}`
        - <- `${monk-volume-path}/ethereum/keystore:/home/erigon/.local/share/erigon/keystore` # needed for the wallet import/export
      entrypoint: <- `erigon --chain=${chain} --internalcl --torrent.download.rate=512mb --http.addr=0.0.0.0 --http.api=eth,web3,net,debug,trace,txpool --datadir=${data-dir} ${options}`
  services:
    grpc-server:
      container: erigon
      port: 9090
      protocol: tcp
    snap-sync-tcp:
      container: erigon
      port: 42069
      host-port: 42069
      protocol: tcp
    snap-sync-udp:
      container: erigon
      port: 42069
      host-port: 42069
      protocol: udp
    engine-api:
      container: erigon
      port: 8551
      protocol: tcp
    peering:
      container: erigon
      port: 30303
      host-port: 30303
      protocol: tcp
      publish: true
    peering-udp:
      container: erigon
      port: 30303
      host-port: 30303
      protocol: udp
      publish: true
    peering2:
      container: erigon
      port: 30304
      host-port: 30304
      protocol: tcp
      publish: true
    peering2-udp:
      container: erigon
      port: 30304
      host-port: 30304
      protocol: udp
      publish: true
    incoming-grpc:
      container: erigon
      port: 9091
      protocol: tcp
    rpc:
      container: erigon
      port: 8545
      host-port: 8545
      protocol: tcp
      publish: true
    caplin:
      container: erigon
      port: 4000
      host-port: 4000
      protocol: udp
      publish: true
    caplin-tcp:
      container: erigon
      port: 4001
      host-port: 4001
      protocol: tcp
      publish: true
  variables:
    chain:
      type: string
      value: "mainnet"
    options:
      type: string
      value: ""
    data-dir:
      type: string
      value: "/home/erigon/.local/share/erigon"
  actions:
    import-key:
      description: "Import a key into the wallet."
      arguments:
        keystore-dir:
          type: string
          description: "Path to the keystore directory."
          default: <- `${monk-volume-path}/ethereum/keystore`
        password:
          type: string
          description: "Password to import the key. If empty, a new key will be generated."
          default: ""
        private-key:
          type: string
          description: "Private key to import. If empty, a new key will be generated."
          default: ""
      code: |
        wallet-import-key($args["keystore-dir"], $args["private-key"], $args["password"])
    export-key:
      description: "Export a key from the wallet."
      arguments:
        keystore-dir:
          type: string
          description: "Path to the keystore directory."
          default: <- `${monk-volume-path}/ethereum/keystore`
        password:
          type: string
          description: "Password to export the key. Default is empty."
          default: ""
        address:
          type: string
          description: "Address to export."
      code: |
        wallet-export-key($args["keystore-dir"], $args["address"], $args["password"])
    list-keys:
      description: "List addresses of all keys in the wallet."
      code: exec("erigon", "/home/erigon/scripts/list-keys.sh")
    sync-status:
      description: "Get the sync status of the node."
      code: exec("erigon", "/home/erigon/scripts/sync-status.sh")
  files:
    list-keys:
      container: erigon
      path: /home/erigon/scripts/list-keys.sh
      contents: |
        #!/bin/sh
        ls {{ v "data-dir" }}/keystore
      mode: 0755
    sync-status:
      container: erigon
      path: /home/erigon/scripts/sync-status.sh
      contents: |
        #!/bin/sh
        curl -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' http://127.0.0.1:8545
      mode: 0755

mainnet:
  defines: runnable
  inherits: ./base
  metadata:
    name: "Ethereum Mainnet Archive Node"
    description: "An Ethereum mainnet archive node, requires 3.5TB of storage."
    network-name: "mainnet"
    node-type: archive

mainnet-pruned:
  defines: runnable
  inherits: ./mainnet
  metadata:
    name: "Ethereum Mainnet Pruned Node"
    description: "An Ethereum mainnet pruned node, requires 2TB of storage."
    node-type: pruned
  variables:
    options: "--prune=hrtc"

goerli:
  defines: runnable
  inherits: ./base
  metadata:
    name: "Ethereum Goerli Testnet Archive Node"
    description: "An Ethereum Goerli testnet archive node, requires 1TB of storage."
    network-name: "goerli"
    node-type: archive
  variables:
    chain: "goerli"

goerli-pruned:
  defines: runnable
  inherits: ./goerli
  metadata:
    name: "Ethereum Goerli Testnet Pruned Node"
    description: "An Ethereum Goerli testnet pruned node, requires 500GB of storage."
    node-type: pruned
  variables:
    options: "--prune=hrtc"

sepolia:
  defines: runnable
  inherits: ./base
  metadata:
    name: "Ethereum Sepolia Testnet Archive Node"
    description: "An Ethereum Sepolia testnet archive node, requires 1TB of storage."
    network-name: "sepolia"
    node-type: archive
  variables:
    chain: "sepolia"

sepolia-pruned:
  defines: runnable
  inherits: ./sepolia
  metadata:
    name: "Ethereum Sepolia Testnet Pruned Node"
    description: "An Ethereum Sepolia testnet pruned node, requires 500GB of storage."
    node-type: pruned
  variables:
    options: "--prune=hrtc"

holesky:
  defines: runnable
  inherits: ./base
  metadata:
    name: "Ethereum Holesky Testnet Archive Node"
    description: "An Ethereum Holesky testnet archive node, requires 1TB of storage."
    network-name: "holesky"
    node-type: archive
  variables:
    chain: "holesky"

holesky-pruned:
  defines: runnable
  inherits: ./holesky
  metadata:
    name: "Ethereum Holesky Testnet Pruned Node"
    description: "An Ethereum Holesky testnet pruned node, requires 500GB of storage."
    node-type: pruned
  variables:
    options: "--prune=hrtc"
