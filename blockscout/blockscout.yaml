namespace: blockscout

# =====================================
#        Blockscout Deployment
# =====================================

blockscout:
  defines: process-group
  metadata:
    name: "Blockscout"
    description: |
      Blockscout is a tool for inspecting and analyzing Ethereum blocks and transactions.
      Run a full Blockscout deployment with all services.
    publisher: sonaric
    website: https://www.blockscout.com/
    icon: https://avatars.githubusercontent.com/u/45625840?s=200&v=4
    version: 1.0.0
    currency: ETH
  runnable-list:
    # rollkit with local-da, beacon-kit, geth
    - rollkit/local-da
    - rollkit/beacon-kit
    - rollkit/geth
    # blockscout services
    - postgres-db
    - stats-db
    - redis
    - backend
    - frontend
    - nginx
    - stats
    - visualizer
    - sig-provider
    - user-ops-indexer


# =====================================
#        Variables
# =====================================
common-vars:
  postgres-db:
    description: "The name of the database to use"
    type: string
    value: blockscout
  postgres-user:
    description: "The user to connect to the database as"
    type: string
    value: blockscout
  postgres-password:
    description: "The password to connect to the database with"
    type: string
    value: ceWb1MeLBEeOIfk65gU8EjF8
  stats-postgres-db:
    description: "The name of the stats database to use"
    type: string
    value: stats
  stats-postgres-user:
    description: "The user to connect to the stats database as"
    type: string
    value: stats
  stats-postgres-password:
    description: "The password to connect to the stats database with"
    type: string
    value: n0uejXPl61ci6ldCuE2gQU5Y


# =====================================
#        Redis
# =====================================
redis:
  defines: runnable
  metadata:
    name: "Redis"
    description: |
      Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker.
    icon: https://avatars.githubusercontent.com/u/1529926?s=200&v=4
  containers:
    redis:
      image: redis:alpine
      restart: always
      paths:
        - <- `${monk-volume-path}/blockscout/redis:/data`
      ports:
        - 6379:6379
  services:
    redis-db:
      container: redis
      port: 6379
      protocol: tcp
      host-port: 6379

# =====================================
#       Database
# =====================================
postgresql:
  metadata:
    name: PostgreSQL
    website: https://www.postgresql.org
    source: https://hub.docker.com/r/bitnami/postgresql
    publisher: sonaric
    icon: https://www.postgresql.org/media/img/about/press/elephant.png
    tags: postgresql, community
    description: |
      PostgreSQL is a powerful, open source object-relational database system.
  readyness:
    code: |
      exec("pg_isready", "/bin/bash", "-c", "pg_isready") contains? "accepting connections"
    period: 5
    initialDelay: 10
  variables:
    max_connections:
      env: POSTGRESQL_MAX_CONNECTIONS
      type: string
      value: "2000"
    timezone:
      env: POSTGRESQL_TIMEZONE
      type: string
      value: UTC
    host-port:
      type: string


postgres-db:
  defines: runnable
  inherits: blockscout/postgresql
  metadata:
    name: "Postgres"
    description: |
      PostgreSQL is a powerful, open source object-relational database system.
    icon: https://avatars.githubusercontent.com/u/177543?s=200&v=4"
  containers:
    postgres:
      restart: always
      image: bitnami/postgresql
      image-tag: latest
      shm-size: 268435456
      paths:
        - <- `${monk-volume-path}/blockscout/postgres-db:/bitnami/postgresql`
      ports:
        - 7432:5432
      environment:
        - <- `POSTGRES_DB=${postgres-db}`
        - <- `POSTGRES_USER=${postgres-user}`
        - <- `POSTGRES_PASSWORD=${postgres-password}`
  variables:
    inherits: blockscout/common-vars
    host-port:
      type: string
      value: 7432
  services:
    postgres-db:
      container: postgres
      protocol: tcp
      port: 5432
      host-port: <- `${host-port}`

stats-db:
  defines: runnable
  inherits: blockscout/postgresql
  metadata:
    name: "Postgres Stats DB"
    description: |
      PostgreSQL database for Blockscout stats
  containers:
    stats-db:
      restart: always
      image: bitnami/postgresql
      image-tag: latest
      shm-size: 268435456
      ports:
        - 7433:5432
      paths:
        - <- `${monk-volume-path}/blockscout/stats-db:/bitnami/postgresql`
      environment:
        - <- `POSTGRES_DB=${stats-postgres-db}`
        - <- `POSTGRES_USER=${stats-postgres-user}`
        - <- `POSTGRES_PASSWORD=${stats-postgres-password}`
  variables:
    inherits: blockscout/common-vars
    host-port:
      type: string
      value: 7433
  services:
    postgres-stats:
      container: stats-db
      protocol: tcp
      port: 5432
      host-port: <- `${host-port}`

# =====================================
#        Blockscout Backend
# =====================================

backend:
  defines: runnable
  metadata:
    name: "Blockscout Backend"
    description: |
      Blockscout is a tool for inspecting and analyzing Ethereum blocks and transactions.
    icon: https://avatars.githubusercontent.com/u/45625840?s=200&v=4
  depends:
    wait-for:
      runnables:
        - blockscout/postgres-db
        - blockscout/redis
        - rollkit/geth
  containers:
    backend:
      image: blockscout/blockscout:latest
      paths:
        - <- `${monk-volume-path}/blockscout/backend/logs:/app/logs`
      restart: always
      entrypoint: /app/start.sh
      ports:
        - 4000:4000
  services:
    backend:
      container: backend
      port: 4000
      protocol: tcp
      host-port: 4000
  connections:
    postgres:
      runnable: blockscout/postgres-db
      service: postgres-db
    redis:
      runnable: blockscout/redis
      service: redis-db
    eth-http:
      runnable: rollkit/geth
      service: http-service
    eth-ws:
      runnable: rollkit/geth
      service: ws-service
    visualizer:
      runnable: blockscout/visualizer
      service: visualizer
    sig-provider:
      runnable: blockscout/sig-provider
      service: sig-provider
    ops-indexer:
      runnable: blockscout/user-ops-indexer
      service: user-ops-indexer

  files:
    start:
      container: backend
      path: /app/start.sh
      contents: |
        #!/bin/sh
        source /app/common-blockscout.env
        /app/bin/blockscout eval "Elixir.Explorer.ReleaseTasks.create_and_migrate()" && /app/bin/blockscout start
      mode: 0755
    config:
      container: backend
      path: /app/common-blockscout.env
      contents: <<< files/common-blockscout.env
      mode: 0755
  variables:
    inherits: blockscout/common-vars
    chain-id:
      type: string
      value: ""
      env: CHAIN_ID
    network:
      type: string
      value: "POA"
      env: NETWORK
    subnetwork:
      type: string
      value: "Awesome chain"
      env: SUBNETWORK
    logo-url:
      description: "The URL of the logo"
      type: string
      value: "https://avatars.githubusercontent.com/u/45625840?s=200&v=4"
      env: LOGO
    footer-logo-url:
      description: "The URL of the footer logo"
      type: string
      value: "https://avatars.githubusercontent.com/u/45625840?s=200&v=4"
      env: FOOTER_LOGO
    redis-bd-url:
      description: "The URL of the Redis database"
      type: string
      value: <- "redis://" connection-hostname("redis") ":" connection-port("redis") concat-all
      env: ACCOUNT_REDIS_URL
    database-url:
      description: "The URL of the database"
      type: string
      value: <- "postgresql://" $postgres-db ":" $postgres-password "@" connection-hostname("postgres") ":" connection-port("postgres") "/" $postgres-db "?ssl=false" concat-all
      env: DATABASE_URL
    ethereum-jsonrpc-http-url:
      description: "The URL of the Ethereum JSON-RPC HTTP endpoint"
      type: string
      value: <- "http://" connection-hostname("eth-http") ":" connection-port("eth-http") concat-all
      env: ETHEREUM_JSONRPC_HTTP_URL
    ethereum-jsonrpc-trace-url:
      description: "The URL of the Ethereum JSON-RPC Trace endpoint"
      type: string
      value: <- "http://" connection-hostname("eth-http") ":" connection-port("eth-http") concat-all
      env: ETHEREUM_JSONRPC_TRACE_URL
    ethereum-jsonrpc-ws-url:
      description: "The URL of the Ethereum JSON-RPC WebSocket endpoint"
      type: string
      value: <- "ws://" connection-hostname("eth-ws") ":" connection-port("eth-ws") concat-all
      env: ETHEREUM_JSONRPC_WS_URL
    vizualize-api-url:
      description: "The URL of the Visualize API"
      type: string
      value: <- "http://" connection-hostname("visualizer") ":" connection-port("visualizer") concat-all
      env: MICROSERVICE_VISUALIZE_SOL2UML_URL
    sig-provider-url:
      description: "The URL of the Signature Provider"
      type: string
      value: <- "http://" connection-hostname("sig-provider") ":" connection-port("sig-provider") concat-all
      env: MICROSERVICE_SIG_PROVIDER_URL
    account-abstraction-url:
      description: "The URL of the Account Abstraction service"
      type: string
      value: <- "http://" connection-hostname("ops-indexer") ":" connection-port("ops-indexer") concat-all
      env: MICROSERVICE_ACCOUNT_ABSTRACTION_URL



sig-provider:
  defines: runnable
  services:
    sig-provider:
      container: sig-provider
      port: 8050
      protocol: tcp
      host-port: 8083
  containers:
    sig-provider:
      image: ghcr.io/blockscout/sig-provider:latest
      restart: always
      arch: linux/amd64
  ports:
    - 8083:8050

frontend:
  defines: runnable
  depends:
    wait-for:
      runnables:
        - blockscout/stats
  containers:
    frontend:
      arch: linux/amd64
      image: ghcr.io/blockscout/frontend:latest
      restart: always
      ports:
        - 3000:3000
  connections:
    backend:
      runnable: blockscout/backend
      service: backend
    visualizer:
      runnable: blockscout/visualizer
      service: visualizer
    stats:
      runnable: blockscout/stats
      service: stats
  services:
    frontend:
      container: frontend
      port: 3000
      protocol: tcp
      host-port: 3000
      publish: true
  variables:
    hostname:
      type: string
      value: "0.0.0.0"
      env: HOSTNAME
    next-public-api-host:
      description: "The API host"
      type: string
      value: <- ip-address-public
      env: NEXT_PUBLIC_API_HOST
    next-public-api-protocol:
      description: "The API protocol"
      type: string
      value: "http"
      env: NEXT_PUBLIC_API_PROTOCOL
    next-public-stats-api-host:
      description: "The Stats API host"
      type: string
      value: <- "http://" connection-hostname("stats") ":" connection-port("stats") concat-all
      env: NEXT_PUBLIC_STATS_API_HOST
    next_public_network_icon:
      description: "The icon of the network"
      type: string
      value: "https://avatars.githubusercontent.com/u/43071041?s=200&v=4"
      env: NEXT_PUBLIC_NETWORK_ICON
    next-public-network-name:
      description: "The name of the network"
      type: string
      value: "Awesome chain"
      env: NEXT_PUBLIC_NETWORK_NAME
    next-public-network-short-name:
      description: "The short name of the network"
      type: string
      value: "Ethereum"
      env: NEXT_PUBLIC_NETWORK_SHORT_NAME
    next-public-network-id:
      description: "The network ID"
      type: string
      value: "5"
      env: NEXT_PUBLIC_NETWORK_ID
    next-public-network-currency-name:
      description: "The name of the network currency"
      type: string
      value: "Ether"
      env: NEXT_PUBLIC_NETWORK_CURRENCY_NAME
    next-public-network-currency-symbol:
      description: "The symbol of the network currency"
      type: string
      value: "ETH"
      env: NEXT_PUBLIC_NETWORK_CURRENCY_SYMBOL
    next-public-network-currency-decimals:
      description: "The number of decimals in the network currency"
      type: string
      value: "18"
      env: NEXT_PUBLIC_NETWORK_CURRENCY_DECIMALS
    next-public-api-base-path:
      description: "The base path for the API"
      type: string
      value: "/"
      env: NEXT_PUBLIC_API_BASE_PATH
    next-public-app-host:
      description: "The application host"
      type: string
      value: <- ip-address-public
      env: NEXT_PUBLIC_APP_HOST
    next-public-app-protocol:
      description: "The application protocol"
      type: string
      value: "http"
      env: NEXT_PUBLIC_APP_PROTOCOL
    next-public-homepage-charts:
      description: "The charts to display on the homepage"
      type: string
      value: "['daily_txs','coin_price','market_cap']"
      env: NEXT_PUBLIC_HOMEPAGE_CHARTS
    next-public-visualize-api-host:
      description: "The Visualize API host"
      type: string
      value: <- "http://" connection-hostname("visualizer") ":" connection-port("visualizer") concat-all
      env: NEXT_PUBLIC_VISUALIZE_API_HOST
    next-public-is-testnet:
      description: "Is this a test network"
      type: string
      value: "true"
      env: NEXT_PUBLIC_IS_TESTNET
    next-public-api-websocket-protocol:
      description: "The WebSocket protocol for the API"
      type: string
      value: "ws"
      env: NEXT_PUBLIC_API_WEBSOCKET_PROTOCOL
    next-public-api-spec-url:
      description: "The URL for the API spec"
      type: string
      value: "https://raw.githubusercontent.com/blockscout/blockscout-api-v2-swagger/main/swagger.yaml"
      env: NEXT_PUBLIC_API_SPEC_URL

stats:
  defines: runnable
  depends:
    wait-for:
      runnables:
        - blockscout/stats-db
        - blockscout/backend
  containers:
    stats:
      image: ghcr.io/blockscout/stats:latest
      arch: linux/amd64
      restart: always
      ports:
        - 9001:8050
  services:
    stats:
      container: stats
      port: 8080
      protocol: tcp
      host-port: 9001
  connections:
    postgres:
      runnable: blockscout/postgres-db
      service: postgres-db
    postgres-stats:
      runnable: blockscout/stats-db
      service: postgres-stats
    backend:
      runnable: blockscout/backend
      service: backend
  variables:
    inherits: blockscout/common-vars
    stats-db-url:
      description: "The URL of the stats database"
      type: string
      value: <- "postgresql://" $stats-postgres-user ":" $stats-postgres-password "@" connection-hostname("postgres-stats") ":" connection-port("postgres-stats") "/" $stats-postgres-db concat-all
      env: STATS__DB_URL
    blockscout-db-url:
      description: "The URL of the Blockscout database"
      type: string
      value: <- "postgresql://" $postgres-user ":" $postgres-password "@" connection-hostname("postgres") ":" connection-port("postgres") "/" $postgres-db concat-all
      env: STATS__BLOCKSCOUT_DB_URL
    stats-server-http-enabled:
      description: "Whether to enable the HTTP server"
      type: bool
      value: true
      env: STATS__SERVER__HTTP__ENABLED
    stats-server-http-addr:
      description: "The address to bind the HTTP server to"
      type: string
      value: "0.0.0.0:8050"
      env: STATS__SERVER__HTTP__ADDR
    stats-server-http-max-body-size:
      description: "The maximum body size for the HTTP server"
      type: int
      value: 2097152
      env: STATS__SERVER__HTTP__MAX_BODY_SIZE
    stats-create-database:
      description: "Whether to create the database"
      type: bool
      value: false
      env: STATS__CREATE_DATABASE
    stats-run-migrations:
      description: "Whether to run the migrations"
      type: bool
      value: true
      env: STATS__RUN_MIGRATIONS
    stats-tracing-enabled:
      description: "Whether to enable tracing"
      type: bool
      value: true
      env: STATS__TRACING__ENABLED
    stats-tracing-format:
      description: "The format of the tracing"
      type: string
      value: "default"
      env: STATS__TRACING__FORMAT
    blockscout-api-url:
      description: "The URL of the Blockscout API"
      type: string
      value: <- "http://" connection-hostname("backend") ":" connection-port("backend") concat-all
      env: STATS__BLOCKSCOUT_API_URL

user-ops-indexer:
  defines: runnable
  containers:
    user-ops-indexer:
      image: ghcr.io/blockscout/user-ops-indexer:latest
      restart: always
      environment:
        - USER_OPS_INDEXER__CONFIG=/app/config.toml
  services:
    user-ops-indexer:
      container: user-ops-indexer
      port: 8051
      protocol: tcp
      host-port: 8082
  connections:
    postgres:
      runnable: blockscout/postgres-db
      service: postgres-db
    backend:
      runnable: blockscout/backend
      service: backend
    geth-http:
      runnable: rollkit/geth
      service: ws-service
  variables:
    inherits: blockscout/common-vars
    indexer-rpc-url:
      description: "The URL of the indexer RPC"
      type: string
      value: <- "ws://" connection-hostname("geth-http") ":" connection-port("geth-http") concat-all
      env: USER_OPS_INDEXER__INDEXER__RPC_URL
    indexer-db-url:
      description: "The URL of the indexer database"
      type: string
      value: <- "postgresql://" $postgres-user ":" $postgres-password "@" connection-hostname("postgres") ":" connection-port("postgres") "/" $postgres-db concat-all
  files:
    config-file:
        container: user-ops-indexer
        path: /app/config.toml
        mode: 0755
        # example: https://github.com/blockscout/blockscout-rs/blob/8f7f08f0991d220a07a19007ddaa74293e3cba37/user-ops-indexer/user-ops-indexer-server/config/base.toml
        contents: <<< files/ops-indexer.config.toml
# =====================================
#        Visualizer
# =====================================
visualizer:
  defines: runnable
  containers:
    visualizer:
      image: ghcr.io/blockscout/visualizer:latest
      arch: linux/amd64
      restart: always
      ports:
        - 9002:8050
  services:
    visualizer:
      container: visualizer
      port: 8050
      protocol: tcp
      host-port: 9002
  variables:
    visualizer-server-grpc-enabled:
      description: "Whether to enable the gRPC server"
      type: bool
      value: false
      env: VISUALIZER_SERVER_GRPC_ENABLED

nginx:
  defines: runnable
  metadata:
    name: "Nginx"
    description: |
      Nginx is a web server that can also be used as a reverse proxy, load balancer, mail proxy, and HTTP cache.
    icon: https://avatars.githubusercontent.com/u/1412239?s=200&v=4
  wait-for:
    runnables:
      - blockscout/frontend
      - blockscout/backend
      - blockscout/stats
    timeout: 30
  services:
    server-port:
      container: nginx-reverse-proxy
      port: 80
      protocol: tcp
      host-port: 80
      publish: true
    visualizer-port:
      container: nginx-reverse-proxy
      port: 8081
      protocol: tcp
      host-port: 8081
      publish: true
    stats-port:
      container: nginx-reverse-proxy
      port: 8080
      protocol: tcp
      host-port: 8080
      publish: true
  containers:
    nginx-reverse-proxy:
      image: docker.io/bitnami/nginx:latest
      cap-add:
        - CAP_NET_BIND_SERVICE
  connections:
    frontend:
      runnable: blockscout/frontend
      service: frontend
    backend:
      runnable: blockscout/backend
      service: backend
    stats:
      runnable: blockscout/stats
      service: stats
    visualizer:
      runnable: blockscout/visualizer
      service: visualizer
  files:
    server-def:
      contents: <<< files/default.conf.template
      mode: 0644
      path: /opt/bitnami/nginx/conf/server_blocks/reverse_proxy.conf
      container: nginx-reverse-proxy
  variables:
    backend-proxy-pass:
      description: "The URL of the backend"
      type: string
      value: <- "http://" connection-hostname("backend") ":" connection-port("backend") concat-all
      env: BACK_PROXY_PASS
    frontend-proxy-pass:
      description: "The URL of the frontend"
      type: string
      value: <- "http://" connection-hostname("frontend") ":" connection-port("frontend") concat-all
      env: FRONT_PROXY_PASS
    visualizer-proxy:
      description: "The URL of the Visualizer"
      type: string
      value: <- "http://" connection-hostname("visualizer") ":" connection-port("visualizer") concat-all
      env: VISUALIZER_PROXY_PASS
    stats-proxy:
      description: "The URL of the Stats"
      type: string
      value: <- "http://" connection-hostname("stats") ":" connection-port("stats") concat-all
      env: STATS_PROXY_PASS